---
layout: post 
title:  "理想化的机器报修流程"
date:   2017-09-14 17:10:00 +0800
excerpt_separator: <!--abstract-->
tags: machine repair
---

随着业务发展，机器数量的增多，机器故障在所难免。当前，故障报修流程不明，机器混布、数据配送、日志拉取等操作错综复杂，给在线机器报修带来一定的困难。个人觉得，机器报修流程对于负责的机器的运维同学来说，应该是流畅的，而不是反复和不同的人沟通，约定时间等。故而思考如下故障报修流程，欢迎指正。

ps: 此流程仅指未步入docker容器化，使用实体机的公司。
<!--abstract-->

### 流程图
![机器报修流程图](../../../assets/2017-09-14-machine-repair/机器报修流程图.png)

### 故障报修流程

1. 屏蔽报警
	- 机器维度报警屏蔽，不论机器在多少节点下、有多少报警策略，都屏蔽。
2. 流量摘除
	- lvs、nginx等有故障摘除机制的服务，直接停服摘除流量。
	- IP直连、无故障摘除机制的服务，需上游上线摘流量。
	- 题外话：公司内部需要配备**四层&七层负载均衡、故障摘除服务**。
3. 故障处理。OP仅需标记故障机器，触发如下动作，在标记页面可见成功信息。
	- 报警屏蔽，包含死机报警。覆盖之前的报警屏蔽动作。
	- 配送暂停，所有和本台机器相关的配送，均被跳过，且配送状态显示"故障跳过"。
	- 部署标记，所有和本台机器相关的部署，均被跳过，且部署状态显示"故障跳过"。
	- 报警反转。
		- 端口类**非公共组件**报警反转，即：启动即报警。
		- 进程类**非公共组件**报警反转，即：启动即报警。
	- 日志采集
		- 实时类日志采集：直接停服务后，采集即停止。
		- 离线采集类：需有接口能在客户端触发日志上传，标记故障后，直接上传。
4. 发起报修。
	- 上述流程观察无误后，确认报修，此后流程即与业务运维无关，等待修复即可。

	
### 故障恢复流程

1. 解除故障标记
	- 数据同步
		- 和数据配送相关的节点目录，均通过配送系统同步一次。
	- 代码同步
		- 在部署系统中，生成和机器相关的代码同步流程。（版本可选，审批人可选，操作流程同正常上线，由RD自行操作）
	- 上线成功后，回调监控系统，恢复报警。
2. 引入流量
	- 恢复报修流程第2步中，摘除的流量。

